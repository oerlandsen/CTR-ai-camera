version: '3'

services:

  vpn-client:
    image: vpn-client
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun
    network_mode: bridge


  redis-broker:
    image: redis:7
    volumes:
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - app-network

  camera-conection:
    build:
      context: ./project/camera_conection
      dockerfile: Dockerfile
    command: python3 camera_conection.py
    volumes:
      - ./project/camera_conection:/opt/
    networks:
      - host
    depends_on:
      - redis-broker
      - producer
      - workers
      - vpn-client
    environment:
      - URL_RTSP=rtsp://admin:ctr_isp2021@10.240.206.185:554/Streaming/channels/101

  producer:
    build:
        context: ./project/producer
        dockerfile: Dockerfile
    command: uvicorn workers_api:app --reload --host 0.0.0.0 --port 8000
    volumes:
      - ./project/producer:/opt/
    expose:
      - 8000
    ports:
      - '8000:8000'
    networks:
      - app-network
    depends_on:
      - redis-broker
    environment:
      - TELEGRAM_TOKEN=7171822455:AAEgIEnfgbGa4wAfQb0MB3kDPNt-iiH20Rc
      - TELEGRAM_CHAT_ID=-1002249739555
      - CELERY_BROKER_URL=redis://redis-broker:6379/0
      - CELERY_RESULT_BACKEND=redis://redis-broker:6379/0
  
  workers:
    build:
      context: ./project/consumer
      dockerfile: Dockerfile
    deploy:
      mode: replicated
      replicas: 1
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    command: celery -A workers_broker_app.celery_app worker --loglevel=INFO --concurrency=1
    volumes:
      - ./project/consumer:/opt/
    depends_on:
      - producer
    networks:
      - app-network
    environment:
      - CELERY_BROKER_URL=redis://redis-broker:6379/0
      - CELERY_RESULT_BACKEND=redis://redis-broker:6379/0
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
  
  # dashboard:
  #   build:
  #     context: ./project
  #     dockerfile: Dockerfile
  #   command: bash -c "sleep 10; celery -A workers_broker_app flower --loglevel=info --url_prefix=dashboard;"
  #   expose:
  #     - 5555
  #   ports:
  #     - '5555:5555'
  #   volumes:
  #     - ./project:/opt/
  #   depends_on:
  #     - workers
  #   networks:
  #     - app-network
  #   environment:
  #     - CELERY_BROKER_URL=redis://redis-broker:6379/0
  #     - CELERY_RESULT_BACKEND=redis://redis-broker:6379/0

networks:
  app-network:
    driver: bridge
  host:
    external: true

volumes:
  db-data:
  app-volume:
